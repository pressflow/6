<?php

/**
 * Implementation of hook_flush_caches().
 *
 * @return array
 */
function path_alias_cache_flush_caches() {
  return array('cache_path');
}

/**
 * Implementation of hook_lookup_path
 *
 * This version of lookup_path is almost exactly what is in core, but adds a cache table.
 *
 */
function path_alias_cache_lookup_path($action, $path = '', $path_language = '') {
  global $language;
  $cache = &path_alias_cache_static(__FUNCTION__, array(
    'map' => array(),
    'no_src' => array(),
    'whitelist' => NULL,
    'system_paths' => array(),
    'no_aliases' => array(),
    'first_call' => TRUE,
  ));
  if (!isset($cache['whitelist'])) {
    $cache['whitelist'] = new PathAliasWhitelist('path_alias_whitelist', 'cache');
  }

  $path_language = $path_language ? $path_language : $language->language;
  $alias_sort_dir = variable_get('path_alias_cache_pid_sort_dir', 'DESC');

  if ($action == 'wipe') {
    $cache = array();
  }
  elseif ($cache['whitelist'] && $path != '') {
    if ($action == 'alias') {
      // During the first call to path_alias_cache_lookup_path() per language, load the
      // expected system paths for the page from cache.
      if (!empty($cache['first_call'])) {
        $cache['first_call'] = FALSE;

        if (!isset($cache['map'][$path_language]) || !is_array($cache['map'][$path_language])) {
          $cache['map'][$path_language] = array();
        }
        // Load system paths from cache.
        $cid = $_GET['q'];
        if ($cached = cache_get($cid, 'cache_path')) {
          $cache['system_paths'] = $cached->data;
          // Now fetch the aliases corresponding to these system paths.
          // We order by ASC and overwrite array keys to ensure the correct
          // alias is used when there are multiple aliases per path.
          $placeholders = db_placeholders($cache['system_paths'], 'varchar');

          // If the second argument to db_query() is an array, all following arguments get ignored.
          // Prepare required query values into a single array.
          $args = $cache['system_paths'];
          $args[] = $path_language;
          $args[] = $alias_sort_dir;
          $result = db_query("SELECT src, dst FROM {url_alias} WHERE src IN($placeholders) AND (language = '%s' OR language = '') ORDER BY language ASC, pid %s", $args);

          while ($record = db_fetch_object($result)) {
            if (!isset($cache['map'][$path_language][$record->src])) {
              $cache['map'][$path_language][$record->src] = $record->dst;
            }
          }
          // Keep a record of paths with no alias to avoid querying twice.
          $cache['no_aliases'][$path_language] = array_flip(array_diff_key($cache['system_paths'], array_keys($cache['map'][$path_language])));
        }
      }
      // If the alias has already been loaded, return it.
      if (isset($cache['map'][$path_language][$path])) {
        return $cache['map'][$path_language][$path];
      }
      // Check the path whitelist, if the top_level part before the first "/"
      // is not in the list, then there is no need to do anything further,
      // it is not in the database.
      elseif (!isset($cache['whitelist'][$path])) {
        return FALSE;
      }
      // For system paths which were not cached, query aliases individually.
      else if (!isset($cache['no_aliases'][$path_language][$path])) {
        // Get the most fitting result falling back with alias without language
        $sql = "SELECT dst FROM {url_alias}
          WHERE src = '%s'
          AND (language = '%s' OR language = '')
          ORDER BY language DESC, pid %s";
        $alias = db_result(db_query($sql, $path, $path_language, $alias_sort_dir));
        $cache['map'][$path_language][$path] = $alias;
        return $alias;
      }
    }
    // Check no_src for this $path in case we've already determined that there
    // isn't a path that has this alias
    elseif ($action == 'source' && !isset($cache['no_src'][$path_language][$path])) {
      // Look for the value $path within the cached map
      $src = '';
      if (!isset($cache['map'][$path_language]) || !($src = array_search($path, $cache['map'][$path_language]))) {
        // Get the most fitting result falling back with alias without language
        $sql = "SELECT src FROM {url_alias}
          WHERE dst = '%s'
          AND (language = '%s' OR language = '')
          ORDER BY language DESC, pid %s";

        if ($src = db_result(db_query($sql, $path, $path_language, $alias_sort_dir))) {
          $cache['map'][$path_language][$src] = $path;
        }
        else {
          // We can't record anything into map because we do not have a valid
          // index and there is no need because we have not learned anything
          // about any Drupal path. Thus cache to no_src.
          $cache['no_src'][$path_language][$path] = TRUE;
        }
      }
      return $src;
    }
  }

  return FALSE;
}

/**
 * Extends DrupalCacheArray to build the path alias whitelist over time.
 */
class PathAliasWhitelist extends DrupalCacheArray {

  /**
   * The substring length for whitelisted paths.
   *
   * The path alias whitelist is an array of path substrings, and whether
   * that substring matches any aliases. The size of this array must be
   * restricted, but the longer the substring, the more opportunity there is
   * to avoid looking up paths that don't match. Therefore the length of
   * the substring is maintained dynamically and reduced when there are more
   * than 100 paths in the array. Since the cache has to be rebuilt each time
   * the variable is shortened, it defaults to 5 at first.
   */
  protected $length;

  function __construct($cid, $bin) {
    $this->length = variable_get('path_alias_whitelist_length', 5);
    $this->cid = $cid;
    $this->bin = $bin;
    parent::__construct($this->cid, $this->bin);
  }

  /**
   * Substring a path to a standard length.
   */
  protected function substr($offset) {
    return drupal_substr($offset, 0, $this->length);
  }

  /**
   * Check the size of the whitelist cache and modify it if necessary.
   *
   * @return
   *   True if the size of the storage exceeded the limit.
   */
  function checkStorage() {
    // If the whitelist is larger than 100 items, reduce the allowed key length
    // by one to reduce the number of possible unique keys. If the allowed
    // length is already one, leave it as it is since it is not possible to
    // subdivide any more.
    if ($this->length > 1 && count($this->storage) >= 100) {
      // Reduce the length by 1,
      $this->length = max(1, $this->length - 1);
      $this->keysToPersist = array();
      $this->storage = array();
      // Acquire a lock to prevent other processes writing to the cache with
      // whitelist items using the old variable value. Since checkStorage() is
      // called by resolveCacheMiss(), a new cache item will be entered when
      // the class goes out of scope in DrupalCacheArray::set() before the lock
      // is released. 
      lock_acquire($this->bin . ':' . $this->cid);
      variable_set('path_alias_whitelist_length', $this->length);
      cache_clear_all($this->cid, $this->bin);
      return TRUE;
    }
  }


  function offsetExists($offset) {
    return parent::offsetExists($this->substr($offset));
  }

  function offsetGet($offset) {
    return parent::offsetGet($this->substr($offset));
  }

  function offsetSet($offset, $value) {
    parent::offsetSet($this->substr($offset), $value);
  }

  function offsetUnset($offset) {
    parent::offsetUnset($this->substr($offset));
  }

  function resolveCacheMiss($path_root) {
    // Check the size of the storage. If it's too big, reduce the substring
    // length by one.
    if ($this->checkStorage()) {
      $path_root = $this->substr($path_root);
    }
    $exists = (bool) db_result(db_query_range("SELECT 1 FROM {url_alias} WHERE src LIKE '%s'", $path_root . '%', 0, 1));
    // If a path prefix does not exist, store it as NULL rather than FALSE
    // since DrupalCacheArray uses isset() in offsetExists().
    $value = $exists ? TRUE : NULL;
    $this->storage[$path_root] = $value;
    $this->persist($path_root);
    return $value;
  }
}

/**
 * Implementation of hook_exit
 * We use this to cache the paths on a page, for later requests.
 */
function path_alias_cache_exit() {
  path_alias_cache_cache_system_paths();
}

/**
 * Cache system paths for a page.
 *
 * Cache an array of the system paths available on each page. We assume
 * that aliases will be needed for the majority of these paths during
 * subsequent requests, and load them in a single query during
 * drupal_lookup_path().
 */
function path_alias_cache_cache_system_paths() {
  // Check if the system paths for this page were loaded from cache in this
  // request to avoid writing to cache on every request.
  $cache = &path_alias_cache_static('path_alias_cache_lookup_path', array());
  if (empty($cache['system_paths']) && !empty($cache['map'])) {
    // Generate a cache ID (cid) specifically for this page.
    $cid = $_GET['q'];
    // The static $map array used by drupal_lookup_path() includes all
    // system paths for the page request.
    if (array_key_exists('map', $cache) && is_array($cache['map']) && $paths = current($cache['map'])) {
      $data = array_keys($paths);
      $expire = $_SERVER['REQUEST_TIME'] + 86400;
      cache_set($cid, $data, 'cache_path', $expire);
    }
  }
}

/**
 * Central static variable storage.
 *
 * @param $name
 *   Globally unique name for the variable. For a function with only one static,
 *   variable, the function name (e.g. via the PHP magic __FUNCTION__ constant)
 *   is recommended. For a function with multiple static variables add a
 *   distinguishing suffix to the function name for each one.
 * @param $default_value
 *   Optional default value.
 * @param $reset
 *   TRUE to reset a specific named variable, or all variables if $name is NULL.
 *   Resetting every variable should only be used, for example, for running
 *   unit tests with a clean environment. Should be used only though via
 *   function drupal_static_reset().
 *
 * @return
 *   Returns a variable by reference if $reset is FALSE.
 */
function &path_alias_cache_static($name, $default_value = NULL, $reset = FALSE) {
  static $data = array();

  // Reset a single value, or all values.
  if ($reset) {
    if (isset($name)) {
      unset($data[$name]);
    }
    else {
      $data = array();
    }
    // We must return a reference to a variable.
    $dummy = NULL;
    return $dummy;
  }

  if (!isset($data[$name])) {
    $data[$name] = $default_value;
  }

  return $data[$name];
}

/**
 * Rebuild the path alias white list.
 *
 * @return
 *   An array containing a white list of path aliases.
 */
function path_alias_cache_path_alias_whitelist_rebuild($path  = NULL) {
  // Don't rebuild the path alias whitelist for already whitelisted paths.
  if (!empty($path)) {
    $whitelist = new PathAliasWhitelist('path_alias_whitelist', 'cache');
    if (isset($whitelist[$path])) {
      return $whitelist;
    }
  }
  cache_clear_all('path_alias_whitelist', 'cache');
  return new PathAliasWhitelist('path_alias_whitelist', 'cache');
}
